name: Windows Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      build_all_architectures:
        description: 'Build all architectures including ARM64'
        required: false
        default: false
        type: boolean

permissions: write-all

env:
  # Build optimization settings
  CMAKE_BUILD_PARALLEL_LEVEL: 4
  MAKEFLAGS: "-j4"
  CACHE_VERSION: v2
  APP_NAME: sast-readium

jobs:
  # MSYS2 builds (preferred - system packages, faster)
  build-msys2:
    name: MSYS2 ${{ matrix.sys }} (${{ matrix.arch }})
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - sys: mingw64
            arch: x86_64
            build_type: Release
            cache_key: msys2-mingw64
          - sys: ucrt64
            arch: x86_64
            build_type: Release
            cache_key: msys2-ucrt
          # Debug build for primary architecture
          - sys: mingw64
            arch: x86_64
            build_type: Debug
            cache_key: msys2-mingw64-debug
          - sys: ucrt64
            arch: x86_64
            build_type: Debug
            cache_key: msys2-ucrt-debug

    defaults:
      run:
        shell: msys2 {0}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 1

      # MSYS2 package caching
      - name: Cache MSYS2 packages
        uses: actions/cache@v4
        with:
          path: |
            D:\a\_temp\msys64\var\cache\pacman\pkg
            D:\a\_temp\msys64\mingw32
            D:\a\_temp\msys64\mingw64
          key: ${{ runner.os }}-msys2-${{ matrix.sys }}-${{ env.CACHE_VERSION }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-msys2-${{ matrix.sys }}-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-msys2-${{ matrix.sys }}-

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.sys }}
          update: true
          install: >-
            mingw-w64-${{ matrix.arch }}-cmake
            mingw-w64-${{ matrix.arch }}-ninja
            mingw-w64-${{ matrix.arch }}-gcc
            mingw-w64-${{ matrix.arch }}-qt6-base
            mingw-w64-${{ matrix.arch }}-qt6-svg
            mingw-w64-${{ matrix.arch }}-qt6-tools
            mingw-w64-${{ matrix.arch }}-poppler-qt6
            mingw-w64-${{ matrix.arch }}-pkg-config
            git

      - name: Verify dependencies
        run: |
          echo "MSYS2 Environment: $MSYSTEM"
          echo "Architecture: ${{ matrix.arch }}"
          
          # Check installed packages
          pacman -Q | grep -E "(cmake|ninja|gcc|qt6|poppler)" || true
          
          # Verify Qt6 and Poppler
          pkg-config --exists Qt6Core && echo "✓ Qt6Core found" || echo "✗ Qt6Core not found"
          pkg-config --exists poppler-qt6 && echo "✓ poppler-qt6 found" || echo "✗ poppler-qt6 not found"

      - name: Configure CMake
        run: |
          cmake --preset=${{ matrix.build_type }}-MSYS2

      - name: Build
        run: |
          cmake --build --preset=${{ matrix.build_type }}-MSYS2 --parallel 4

      - name: Test build output
        run: |
          BUILD_DIR="build/${{ matrix.build_type }}-MSYS2"
          if [ -f "$BUILD_DIR/app/app.exe" ]; then
            echo "✓ Build successful: app.exe found"
            ls -la "$BUILD_DIR/app/"
          else
            echo "✗ Build failed: app.exe not found"
            exit 1
          fi

      - name: Upload MSYS2 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-msys2-${{ matrix.sys }}-${{ matrix.build_type }}
          path: |
            build/${{ matrix.build_type }}-MSYS2/app/app.exe
            build/${{ matrix.build_type }}-MSYS2/app/*.dll
            build/${{ matrix.build_type }}-MSYS2/app/styles/
          retention-days: 7

  # MSVC builds with vcpkg (fallback when MSYS2 not suitable)
  build-msvc:
    name: MSVC ${{ matrix.arch }} (${{ matrix.config }})
    runs-on: windows-latest
    # Only run MSVC builds if explicitly requested or for ARM64
    if: github.event.inputs.build_all_architectures == 'true' || contains(github.event.head_commit.message, '[msvc]')
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x64
            config: Release
            preset: Release-Windows
            cache_key: msvc-x64
          - arch: ARM64
            config: Release
            preset: Release-Windows-ARM64
            cache_key: msvc-arm64
            cross_compile: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 1

      # System dependencies for vcpkg
      - name: Install system dependencies
        shell: pwsh
        run: |
          # Install required build tools
          choco install ninja -y
          
          # Refresh environment
          refreshenv

      - name: Install CMake and Ninja
        uses: lukka/get-cmake@latest

      # vcpkg caching (comprehensive)
      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/vcpkg
            !${{ github.workspace }}/vcpkg/buildtrees
            !${{ github.workspace }}/vcpkg/packages
            !${{ github.workspace }}/vcpkg/downloads
          key: ${{ runner.os }}-vcpkg-${{ matrix.cache_key }}-${{ env.CACHE_VERSION }}-${{ hashFiles('**/vcpkg.json', '**/vcpkg-configuration.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-${{ matrix.cache_key }}-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-vcpkg-${{ matrix.cache_key }}-
            ${{ runner.os }}-vcpkg-

      - name: Cache vcpkg packages
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/vcpkg/installed
            ${{ github.workspace }}/vcpkg/packages
          key: ${{ runner.os }}-vcpkg-packages-${{ matrix.arch }}-${{ env.CACHE_VERSION }}-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-packages-${{ matrix.arch }}-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-vcpkg-packages-${{ matrix.arch }}-

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: 'vcpkg.json'
          vcpkgConfigurationJsonGlob: 'vcpkg-configuration.json'
          appendedCacheKey: ${{ env.CACHE_VERSION }}-${{ matrix.arch }}

      - name: Configure CMake (MSVC)
        run: |
          if ("${{ matrix.cross_compile }}" -eq "true") {
            cmake --preset=${{ matrix.preset }} -A ${{ matrix.arch }}
          } else {
            cmake --preset=${{ matrix.preset }}
          }
        shell: pwsh

      - name: Build (MSVC)
        run: |
          cmake --build --preset=${{ matrix.preset }} --parallel 4
        shell: pwsh

      - name: Upload MSVC artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-msvc-${{ matrix.arch }}-${{ matrix.config }}
          path: |
            build/Release*/app/app.exe
            build/Release*/app/*.dll
            build/Release*/app/styles/
          retention-days: 7

  # Build summary and status
  build-summary:
    name: Windows Build Summary
    runs-on: windows-latest
    needs: [build-msys2, build-msvc]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate build summary
        shell: pwsh
        run: |
          $summary = @"
          # Windows Build Summary
          
          ## Build Strategy
          - **Primary**: MSYS2 with system packages (faster, preferred)
          - **Fallback**: MSVC with vcpkg (when needed)
          - **Architecture Support**: x64, x86 (MSYS2), ARM64 (MSVC)
          
          ## Artifacts Generated
          
          "@
          
          Get-ChildItem -Path "artifacts" -Directory | ForEach-Object {
            $artifactName = $_.Name
            $fileCount = (Get-ChildItem -Path $_.FullName -Recurse -File).Count
            $totalSize = [math]::Round((Get-ChildItem -Path $_.FullName -Recurse -File | Measure-Object -Property Length -Sum).Sum / 1MB, 2)
            $summary += "- **$artifactName**: $fileCount files, $totalSize MB`n"
          }
          
          $summary += @"
          
          ## Platform Coverage
          ✅ Windows x64 (MSYS2 + MSVC)
          ✅ Windows x86 (MSYS2)
          ✅ Windows ARM64 (MSVC cross-compile)
          
          ## Performance Optimizations
          - System packages prioritized over vcpkg
          - Comprehensive caching (packages, build artifacts)
          - Parallel builds with optimal job count
          - Shallow git clones for faster checkout
          
          "@
          
          $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding UTF8
